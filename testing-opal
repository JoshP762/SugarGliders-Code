import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QLabel
from PyQt6.QtCore import QTimer
import pyqtgraph as pg
import numpy as np
from PyQt6 import QtWidgets 




def main():
    app = QApplication(sys.argv)
    window = QMainWindow()
    window.setGeometry(800, 300, 600, 600)
    window.setWindowTitle('sugar gliders test window opal')
    
    
    
    text = QLabel(window)
    text.setText('Data')
    text.move(0, 250)
    
    manual_release = QtWidgets.QPushButton(window)
    manual_release.move(0, 0)
    manual_release.setText('Manual Release')
    manual_release.clicked.connect(manual_release_clicked)

    calibration = QtWidgets.QPushButton(window)
    calibration.move(100, 0)
    calibration.setText('Calibration')
    calibration.clicked.connect(calibration_clicked)

    LED = QtWidgets.QPushButton(window)
    LED.move(200,0)
    LED.setText('Toggle LED')
    LED.clicked.connect(LED_clicked)

    buzzer = QtWidgets.QPushButton(window)
    buzzer.move(300, 0)
    buzzer.setText('Toggle buzzer')
    buzzer.clicked.connect(buzzer_clicked)

    ping = QtWidgets.QPushButton(window)
    ping.move(400, 0)
    ping.setText('Ping')
    ping.clicked.connect(ping_clicked)

    simulation = QtWidgets.QPushButton(window)
    simulation.move(500, 0)
    simulation.setText('Simulation')
    simulation.clicked.connect(simulation_clicked)
    

    window.show()
    sys.exit(app.exec())


def manual_release_clicked():
    print('manual release')
    #release payload here

def calibration_clicked():
    print('calibration')
    #tell pico to tell sensors to shut up and listen

def LED_clicked():
    print('LED')
    #Turn LED on and off

def buzzer_clicked():
    print('buzzer')
    #turn buzzer on and off

def ping_clicked():
    print('ping')
    #ping

def simulation_clicked():
    print('simulation')
    #simulate
main()